import org.gradle.internal.logging.text.StyledTextOutputFactory
import static org.gradle.internal.logging.text.StyledTextOutput.Style

plugins {
    id 'java'
    id 'com.adarshr.test-logger' version '3.2.0'
    id 'io.qameta.allure' version '2.9.6'
    id "org.gradle.test-retry" version "1.3.1"
}

wrapper {
    gradleVersion = '7.0.2'
    distributionUrl = 'https://services.gradle.org/distributions/gradle-7.0.2-all.zip'
}

allure {
    version = '2.13.3'
}

group 'org.vk.qa'
version '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'com.codeborne:selenide:6.7.4'
    implementation 'org.testng:testng:6.14.3'
    implementation 'io.github.bonigarcia:webdrivermanager:5.1.0'
    testImplementation 'io.qameta.allure:allure-selenide:2.13.3'
    implementation 'org.seleniumhq.selenium:selenium-java:3.141.59'
    implementation 'org.seleniumhq.selenium:selenium-remote-driver:3.141.59'

}

test {
    outputs.upToDateWhen { false }
    def env = System.getProperty('env', 'pro')
    def group = System.getProperty('group', env)
    def browser = System.getProperty('browser', 'chrome')
    def threads = System.getProperty('threads', '1') as int
    def configFile = 'vk.config.' + env + '.properties'
    def commonFile = 'vk.browser.' + browser + '.properties'
    def secretsFile = 'vk.secrets.properties'
    def maxFailuresValue = 8
    def maxRetriesValue = 1

    System.setProperty("java.awt.headless", "false")
    systemProperties System.properties
    systemProperty 'vk.config.file', configFile + ',' + secretsFile + ',' + commonFile

    useTestNG() {
        configFailurePolicy 'continue'
        if (threads > 1) {
            parallel 'methods'
            threadCount threads
        }
    }

    retry {
        maxRetries = maxRetriesValue
        maxFailures = maxFailuresValue
    }

    /***  Adarshr terminal plugin theme and params  ***/
    testlogger {
        theme 'mocha-parallel'   // awesome theme for running tests in terminal
        slowThreshold 600000     // You can set time(ms) to show slow tests that's longer your (ms) value
        showFailedStandardStreams true
        showSimpleNames true
    }

    doFirst {
        def props = new Properties()
        file(configFile).withInputStream { props.load(it) }
        println("                                                           ")
        println("  ---------------------------------------------------------")
        println("                                                           ")
        printHeader(project.name)
        println("                                                           ")
        printSetting("ENVIRONMENT:", env)
        printSetting("VK UI URL:", getProperty(props, 'vk.url'))
        printSetting("BROWSER:", browser)
        printSetting("TEST GROUP:", group)
        printSetting("START DATE:", new Date().format("yyyy-MM-dd  HH:mm:ss"))
        printSetting("THREADS NUM:", threads)
        println("                                                           ")
        println("  ---------------------------------------------------------")
        println("                                                           ")
    }
}

allureReport {}

allureServe {}

def printHeader(String property) {
    def out = services.get(StyledTextOutputFactory).create("an-ouput")
    out.style(Style.Header).println(String.format(
            "        *******  %s PROJECT  *******      ", property.toUpperCase()))
}

def printSetting(String property, value) {
    def out = services.get(StyledTextOutputFactory).create("an-ouput")
    out.style(Style.Identifier).text(String.format("  %-20s", property)).style(Style.Normal).println(value)
}

def getProperty(Properties properties, String property) {
    return System.getProperty(property, properties.get(property))
}
